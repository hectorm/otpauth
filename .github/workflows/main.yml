name: 'Main'

on:
  push:
    tags: ['*']
    branches: ['*']
  pull_request:
    branches: ['*']
  schedule:
    - cron: '25 12 * * 3'
  workflow_dispatch:

permissions: {}

jobs:

  lint:
    name: 'Lint'
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
    env:
      NODE_VERSION: 'lts/*'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11'
      - name: 'Use Node.js ${{ env.NODE_VERSION }}'
        uses: 'actions/setup-node@b39b52d1213e96004bfcb1c61a8a6fa8ab84f3e8'
        with:
          node-version: '${{ env.NODE_VERSION }}'
          cache: 'npm'
      - name: 'Install'
        run: 'npm ci'
      - name: 'Lint'
        run: 'npm run lint'

  docs:
    name: 'Docs'
    needs: ['lint']
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
    env:
      NODE_VERSION: 'lts/*'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11'
      - name: 'Use Node.js ${{ env.NODE_VERSION }}'
        uses: 'actions/setup-node@b39b52d1213e96004bfcb1c61a8a6fa8ab84f3e8'
        with:
          node-version: '${{ env.NODE_VERSION }}'
          cache: 'npm'
      - name: 'Install'
        run: 'npm ci'
      - name: 'Docs'
        run: 'npm run docs'

  build-node:
    name: 'Build and test on Node.js ${{ matrix.node_version }}'
    needs: ['lint']
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
    strategy:
      fail-fast: false
      matrix:
        node_version: ['lts/-1', 'lts/*', 'current']
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11'
      - name: 'Use Node.js ${{ matrix.node_version }}'
        uses: 'actions/setup-node@b39b52d1213e96004bfcb1c61a8a6fa8ab84f3e8'
        with:
          node-version: '${{ matrix.node_version }}'
          cache: 'npm'
      - name: 'Install'
        run: 'npm ci'
      - name: 'Build'
        run: 'npm run types && npm run build'
      - name: 'Test'
        run: 'npm run test:node'

  build-deno:
    name: 'Build and test on Deno ${{ matrix.deno_version }}'
    needs: ['lint']
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
    strategy:
      fail-fast: false
      matrix:
        deno_version: ['vx.x.x']
    env:
      NODE_VERSION: 'lts/*'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11'
      - name: 'Use Node.js ${{ env.NODE_VERSION }}'
        uses: 'actions/setup-node@b39b52d1213e96004bfcb1c61a8a6fa8ab84f3e8'
        with:
          node-version: '${{ env.NODE_VERSION }}'
          cache: 'npm'
      - name: 'Use Deno ${{ matrix.deno_version }}'
        uses: 'denoland/setup-deno@0df5d9c641efdff149993c321fc27c11c5df8623'
        with:
          deno-version: '${{ matrix.deno_version }}'
      - name: 'Install'
        run: 'npm ci'
      - name: 'Build'
        run: 'npm run types && npm run build'
      - name: 'Test'
        run: 'npm run test:deno'

  build-bun:
    name: 'Build and test on Bun ${{ matrix.bun_version }}'
    needs: ['lint']
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
    strategy:
      fail-fast: false
      matrix:
        bun_version: ['latest']
    env:
      NODE_VERSION: 'lts/*'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11'
      - name: 'Use Node.js ${{ env.NODE_VERSION }}'
        uses: 'actions/setup-node@b39b52d1213e96004bfcb1c61a8a6fa8ab84f3e8'
        with:
          node-version: '${{ env.NODE_VERSION }}'
          cache: 'npm'
      - name: 'Use Bun ${{ matrix.bun_version }}'
        run: 'npm install -g bun@${{ matrix.bun_version }}'
      - name: 'Install'
        run: 'npm ci'
      - name: 'Build'
        run: 'npm run types && npm run build'
      - name: 'Test'
        run: 'npm run test:bun'

  build-browser:
    name: 'Build and test on ${{ matrix.browser }} browser'
    needs: ['lint']
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
    strategy:
      fail-fast: false
      matrix:
        browser: ['chromium', 'firefox', 'webkit']
    env:
      NODE_VERSION: 'lts/*'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11'
      - name: 'Use Node.js ${{ env.NODE_VERSION }}'
        uses: 'actions/setup-node@b39b52d1213e96004bfcb1c61a8a6fa8ab84f3e8'
        with:
          node-version: '${{ env.NODE_VERSION }}'
          cache: 'npm'
      - name: 'Install'
        run: 'npm ci && npx playwright install --with-deps "${{ matrix.browser }}"'
      - name: 'Build'
        run: 'npm run types && npm run build'
      - name: 'Test'
        run: 'npm run test:browser:"${{ matrix.browser }}"'

  publish-npm:
    name: 'Publish npm package'
    if: "startsWith(github.ref, 'refs/tags/v')"
    needs:
      - 'build-node'
      - 'build-deno'
      - 'build-bun'
      - 'build-browser'
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
    env:
      NODE_VERSION: 'lts/*'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11'
      - name: 'Use Node.js ${{ env.NODE_VERSION }}'
        uses: 'actions/setup-node@b39b52d1213e96004bfcb1c61a8a6fa8ab84f3e8'
        with:
          node-version: '${{ env.NODE_VERSION }}'
          registry-url: 'https://registry.npmjs.org'
      - name: 'Publish package'
        env:
          NODE_AUTH_TOKEN: '${{ secrets.NPM_TOKEN }}'
        run: |
          PKG_NAME="$(jq -r '.name' ./package.json)"; PKG_VERSION="$(jq -r '.version' ./package.json)"
          if [ "$(npm view "${PKG_NAME:?}" versions --json | jq -r --arg v "${PKG_VERSION:?}" 'index($v)')" = 'null' ]; then
            npm publish
          fi

  release-github:
    name: 'Create GitHub release'
    if: "startsWith(github.ref, 'refs/tags/v')"
    needs:
      - 'build-node'
      - 'build-deno'
      - 'build-bun'
      - 'build-browser'
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'write'
    steps:
      - name: 'Create release'
        env:
          GITHUB_PAT: '${{ secrets.GITHUB_TOKEN }}'
        run: |
          RELEASE_STATUS="$(curl -fs --proto '=https' --tlsv1.3 --globoff \
            --url "https://api.github.com/repos/${GITHUB_REPOSITORY:?}/releases/tags/${GITHUB_REF_NAME:?}" \
            --header "Authorization: Bearer ${GITHUB_PAT:?}" \
            --header 'Accept: application/vnd.github.v3+json' \
            --header 'Content-Type: application/json' \
            --write-out '%{http_code}' --output /dev/null ||:)"
          if [ "${RELEASE_STATUS:?}" = '200' ]; then exit 0; fi
          RELEASE_ID="$(curl -fsS --proto '=https' --tlsv1.3 --globoff \
            --url "https://api.github.com/repos/${GITHUB_REPOSITORY:?}/releases" \
            --header "Authorization: Bearer ${GITHUB_PAT:?}" \
            --header 'Accept: application/vnd.github.v3+json' \
            --header 'Content-Type: application/json' \
            --data "$(jq -rn --arg tag "${GITHUB_REF_NAME:?}" '{"name": $tag, "tag_name": $tag, "generate_release_notes": true}')" | jq -r '.id')"
          if [ -z "${RELEASE_ID-}" ] || [ "${RELEASE_ID:?}" = 'null' ]; then exit 1; fi
